import {LcEntryType} from '../import';
import {LcEntryChangeType} from './LcEntryChangeType';


/**
 * Every LcEntryValue can have multiple change objects but
 * there can be only one change object per frame.
 */
export abstract class LcEntryChange {
  public abstract readonly kind: LcEntryType;

  public abstract id: string;
  /**
   * Every LcEntryValue can contain max. one LcEntryChange per frameNumber.
   */
  public abstract frameNumber: number;
  public abstract frameType: LcEntryChangeType;

  /**
   * Compare just the values.
   *
   * @param other
   */
  public abstract equalValues(other: LcEntryChange): boolean;

  /**
   * Set this flag to false for autogenerated change objects. For example in VideoLabelingMode the last keyFrame is
   * autogenerated.
   *
   * This flag is just a frontend thing. It's not known within the backend.
   */
  public handCrafted: boolean = true;

  /**
   * Return true if the change objects are equivalent.
   * E.g. if they have the same values, frameNumber and Type.
   *
   * Note: the id is ignored and not compared. The objects itself
   * are not compared against each other with `===`.
   *
   * @param other
   */
  public equivalent(other: LcEntryChange): boolean {
    return !!other &&
      typeof other === 'object' &&
      this.frameType === other.frameType &&
      this.frameNumber === other.frameNumber &&
      this.equalValues(other);
  }

  /**
   * Log the change stack.
   *
   * @deprecated For development only.
   * @param a message as string or the change object to log.
   * @param b the object to log if a message is given.
   */
  public static log(a: string|LcEntryChange|LcEntryChange[], b: LcEntryChange|LcEntryChange[] = undefined): void {

    const message = typeof a === 'string' ? a : undefined;
    const change = typeof a === 'object' ? a : b;

    if (change === undefined) {
      console.log([message, 'undefined'].filter(x => !!x).join(' '));
      return;
    }

    const reducer = (c: LcEntryChange) => {
      return !/*not*/!!c ? undefined : {
        id: c.id,
        frameType: c.frameType,
        frameNumber: c.frameNumber,
      };
    };

    const log = Array.isArray(change) ? change.map(reducer) : reducer(change);
    if (!!message) {
      console.log(message);
    }
    console.log(JSON.stringify(log, null, 2));
  }
}
